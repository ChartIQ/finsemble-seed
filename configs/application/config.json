{
	"comment": "Top-level application config for development, adding on top of the core config",
	"mode": "",
	"isAuthEnabled": false,
	"storage": {
		"topicToDataStoreAdapters" : {
			"finsemble" : "LocalStorageAdapter",
			"finsemble.workspace" : "LocalStorageAdapter",
			"finsemble.workspace.cache" : "LocalStorageAdapter"
		},
		"dataStoreAdapters" : {
			"LocalStorageAdapter": "$applicationRoot/adapters/LocalStorageAdapter.js"
		}
	},
	"servicesConfig": {
		"launcher": {
			"searchProviderAction": {
				"title": "App Catalog",
				"component": "App Catalog"
			}
		}
	},
	"systemTrayIcon": "$applicationRoot/components/assets/img/Finsemble_Taskbar_Icon.png",
	"systemTrayComponent": "File Menu",
	"debugServiceDelay": 0,
	"betaFeatures": {
		"docking": {
			"enabled": true
		},
		"assimilation": {
			"enabled": true,
			"blacklist": [],
			"whitelist": [],
			"onlySpawned": true,
			"throttle": 10
		}
	},
	"splinteringConfig": {
		"comment": "A SplinterAgent is just an openfin application that is capable of spawning specific components/services. If you try to spawn a component/service that one of these agents does not cover, it will be spawned by the defaultAgent. You can also specify maxWindowsPerAgent if you would like to limit your agents to some ceiling. This is useful when you have a particularly heavy component.",
		"enabled": true,
		"splinterAgents": [
			{
				"agentLabel": "systemComponents",
				"components": [
					"Toolbar",
					"App Launcher",
					"Workspace Management Menu",
					"Finsemble Linker Window",
					"defaultAuthentication",
					"dialogSignOn",
					"dialogTemplate",
					"dialogTest",
					"File Menu",
					"AdhocComponentForm",
					"Process Monitor"
				]
			},
			{
				"agentLabel": "dockingService",
				"services": [
					"dockingService"
				]
			},
			{
				"agentLabel": "loggerService",
				"services": [
					"loggerService"
				]
			},
			{
				"agentLabel": "launcherService",
				"services": [
					"launcherService"
				]
			},
			{
				"agentLabel": "storageService",
				"services": [
					"storageService"
				]
			},
			{
				"agentLabel": "workspaceService",
				"services": [
					"workspaceService"
				]
			},
			{
				"agentLabel": "linkerService",
				"services": [
					"linkerService"
				]
			},
			{
				"agentLabel": "RPCService",
				"services": [
					"RPCService"
				]
			},
			{
				"agentLabel": "authenticationService",
				"services": [
					"authenticationService"
				]
			}
		]
	},
	"importConfig": [
		"$applicationRoot/configs/application/components.json",
		"$applicationRoot/components/sampleComponents.json",
		"$applicationRoot/configs/other/defaultWorkspaces.json",
		"$applicationRoot/configs/other/defaultWorkspaceTemplates.json",
		"$applicationRoot/configs/application/services.json"
	]
}