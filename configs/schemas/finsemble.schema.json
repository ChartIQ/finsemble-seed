{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$ref": "#/definitions/ManifestSubschema",
	"definitions": {
		"ManifestFileSubschema": {
			"description": "Subschema corresponding to a file containing the manifest config, to support VSCode Intellisense.. ",
			"type": "object",
			"properties": {
				"$schema": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"devtools_port": {
					"description": "Manifest property to set Chromium devTools port. ",
					"type": "number"
				},
				"startup_app": {
					"$ref": "#/definitions/manifestStartupApp"
				},
				"splashScreenImage": {
					"description": "Manifest URL for splash screen to display on startup.",
					"type": "string",
					"format": "uri"
				},
				"appAssets": {
					"$ref": "#/definitions/appAssets"
				},
				"finsemble": {
					"title": "finsemble",
					"description": "Copy of Finsemble object tto verify manifest File",
					"type": "object",
					"properties": {
						"applicationRoot": {
							"type": "string"
						},
						"moduleRoot": {
							"type": "string"
						},
						"servicesRoot": {
							"type": "string"
						},
						"configSchemaURL": {
							"type": "string"
						},
						"notificationURL": {
							"type": "string"
						},
						"bootConfig": {
							"$ref": "#/definitions/boot_config"
						},
						"router": {
							"$ref": "#/definitions/router"
						},
						"importConfig": {
							"$ref": "#/definitions/importConfig"
						},
						"importThirdPartyConfig": {
							"$ref": "#/definitions/importThirdPartyConfig"
						},
						"splashScreenImage": {
							"description": "URL to use for splash screen image when starting Finsemble.",
							"type": "string",
							"default": "http://localhost:3375/assets/img/FinsembleSplash.png"
						},
						"splashScreenTimeout": {
							"description": "Amount of time (in milliseconds) to show the splash screen",
							"type": "number",
							"default": 6000
						},
						"custom": {}
					},
					"required": [
						"applicationRoot",
						"moduleRoot",
						"servicesRoot",
						"configSchemaURL",
						"notificationURL",
						"bootConfig"
					]
				},
				"allowEvalInPreload": {
					"description": "Set to `true` to delete `unsafe-eval` and `script-src directives` from the content security policy.",
					"type": "boolean",
					"default": false
				},
				"custom": {}
			},
			"required": ["startup_app", "finsemble"],
			"additionalProperties": false
		},
		"UIComponentsFileSubschema": {
			"description": "Subschema corresponding to a file containing UI component config, to support VSCode Intellisense.. ",
			"type": "object",
			"properties": {
				"$schema": {
					"type": "string"
				},
				"comment": {},
				"components": {
					"$ref": "#/definitions/components"
				}
			},
			"additionalProperties": false
		},
		"ComponentsFileSubschema": {
			"description": "Subschema corresponding to a file containing component config, to support VSCode Intellisense.. ",
			"type": "object",
			"properties": {
				"$schema": {
					"type": "string"
				},
				"comment": {},
				"components": {
					"description": "config for components",
					"type": "object",
					"additionalProperties": {
						"$ref": "#/definitions/component"
					}
				}
			},
			"additionalProperties": false
		},
		"ServicesFileSubschema": {
			"description": "Subschema corresponding to a file containing service config, to support VSCode Intellisense.. ",
			"type": "object",
			"properties": {
				"$schema": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"services": {
					"description": "config for components",
					"type": "object",
					"additionalProperties": {
						"$ref": "#/definitions/service"
					}
				}
			},
			"additionalProperties": false
		},
		"ApplicationConfigFileSubschema": {
			"title": "finsemble",
			"description": "Subschema for all application config (typically application/config.json)",
			"type": "object",
			"properties": {
				"$schema": {
					"type": "string"
				},
				"comment": {
					"description": "(DEPRECATED) Comment string inserted into config.",
					"type": "string"
				},
				"authentication": {
					"$ref": "#/definitions/authenticationProfile"
				},
				"workspaceTemplates": {
					"$ref": "#/definitions/blankWorkspaceTemplate"
				},
				"importConfig": {
					"$ref": "#/definitions/importConfig"
				},
				"importThirdPartyConfig": {
					"$ref": "#/definitions/importThirdPartyConfig"
				},
				"securityPolicies": {
					"$ref": "#/definitions/securityPolicies"
				},
				"securityPolicyRules": {
					"$ref": "#/definitions/securityPolicyRules",
					"requiredPlaceHolder": ["crossDomain", "sameDomain"]
				},
				"accessibleLinker": {
					"description": "(PUBLIC)",
					"type": "boolean"
				},
				"servicesConfig": {
					"$ref": "#/definitions/servicesConfig"
				},
				"preferences": {
					"$ref": "#/definitions/preferences"
				},
				"systemTrayIcon": {
					"description": "(PUBLIC) Sets the location of the system tray icon (lower right corner of the terminal)",
					"type": "string"
				},
				"systemTrayComponent": {
					"description": "(PUBLIC)",
					"type": "string"
				},
				"Window Manager": {
					"$ref": "#/definitions/windowManager"
				},
				"//appDirectoryEndpoint": {
					"type": "string"
				},
				"appDirectoryEndpoint": {
					"type": "string"
				},
				"globalHotkeys": {
					"description": "(PUBLIC)",
					"type": "object"
				},
				"workspaces": {
					"$ref": "#/definitions/workspacesArray"
				},
				"components": {
					"$ref": "#/definitions/components"
				},
				"services": {
					"$ref": "#/definitions/services"
				},
				"feaURLWhitelist": {
					"description": "A regex pattern that represents a URL whitelist. If set, components will **only** be able to navigate to URLs that match the regex pattern.",
					"type": "string"
				},
				"failedComponentCloseNotification": {
					"description": "If true throw a notification when a component fails to close within the time limit specified in `finsemble[\"Window Manager\"].componentCloseTimeout`",
					"type": "boolean",
					"default": false
				},
				"initialWorkspace": {
					"description": "The workspace name specified by this config will be the first one presented to an end user the very first time they start the smart desktop. This overrides the default behavior set by the config: finsemble.workspaces. After the very first instance of the smart desktop, Finsemble will load the last workspace loaded or any workspace specified by user preferences.",
					"type": "string"
				},
				"shutdownTimeout": {
					"description": "Amount of time (in milliseconds) to give services to shutdown before forcibly quitting the application. Components get 2 seconds less than services.",
					"type": "number",
					"minimum": 0,
					"default": 10000
				},
				"scheduledRestart": {
					"description": "Set Finsemble to automatically restart. These values can be overriden by the user through user preferences.\r\nhour 0 - The hour when Finsemble should restart. This is in 24 hour time according to the user's local machine's timezone.\r\nminute 0 - The minute when Finsemble should restart.\r\ndialogTimeout 10000 - When it is time to restart, the user is presented with a dialog to confirm or cancel. Since resets occur at night while the machine is unattended, most often the dialog will time out and Finsemble will reset. The `dialogTimeout` specifies how long to wait for a user response in milliseconds.",
					"type": "boolean",
					"default": false
				},
				"stackedWindow": {
					"$ref": "#/definitions/stackedWindow"
				},
				"//": {
					"description": "(DEPRECATED) Comment string inserted into config.",
					"type": "string"
				},
				"custom": {}
			},
			"required": ["accessibleLinker"],
			"additionalProperties": false
		},
		"SecurityPolicyFileSubschema": {
			"description": "Subschema corresponding to the security policies file, to support VSCode Intellisense.. ",
			"type": "object",
			"properties": {
				"$schema": {},
				"comment": {
					"type": "string"
				},
				"securityPolicies": {
					"$ref": "#/definitions/securityPolicies"
				},
				"securityPolicyRules": {
					"$ref": "#/definitions/securityPolicyRules"
				}
			},
			"required": ["securityPolicies", "securityPolicyRules"],
			"additionalProperties": false
		},
		"WorkspacesFileSubschema": {
			"description": "Subschema corresponding to the security policies file, to support VSCode Intellisense.. ",
			"type": "object",
			"properties": {
				"$schema": {},
				"comment": {
					"type": "string"
				},
				"workspaces": {
					"$ref": "#/definitions/workspacesArray"
				}
			},
			"required": ["workspaces"],
			"additionalProperties": false
		},
		"CoreConfigFileSubschema": {
			"description": "Subschema corresponding to a file containing the manifest config, to support VSCode Intellisense.. ",
			"type": "object",
			"properties": {
				"$schema": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"bootTasks": {
					"$ref": "#/definitions/bootTasks"
				},
				"system": {
					"$ref": "#/definitions/system"
				},
				"servicesRoot": {
					"type": "string"
				},
				"thirdPartyRoot": {
					"type": "string"
				},
				"configVersion": {
					"type": "string"
				},
				"workspaceTemplates": {
					"$ref": "#/definitions/blankWorkspaceTemplate"
				},
				"betaFeatures": {
					"description": "(PRIVATE) (DEPRECATED)",
					"type": "object"
				},
				"importConfig": {
					"$ref": "#/definitions/importConfig"
				}
			},
			"required": [
				"bootTasks",
				"system",
				"servicesRoot",
				"thirdPartyRoot",
				"configVersion",
				"betaFeatures",
				"importConfig"
			],
			"additionalProperties": false
		},
		"ManifestSubschema": {
			"description": "Highest level subschema, including manifest and finsemble",
			"type": "object",
			"properties": {
				"$schema": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"devtools_port": {
					"description": "Manifest property to set Chromium devTools port. ",
					"type": "number",
					"default": 9090
				},
				"startup_app": {
					"$ref": "#/definitions/manifestStartupApp"
				},
				"splashScreenImage": {
					"description": "Manifest URL for splash screen to display on startup.",
					"type": "string",
					"format": "uri"
				},
				"appAssets": {
					"$ref": "#/definitions/appAssets"
				},
				"finsemble": {
					"$ref": "#/definitions/FinsembleSubschema"
				},
				"finsemble-electron-adapter": {
					"$ref": "#/definitions/electronAdapter"
				},
				"custom": {},
				"allowEvalInPreload": {
					"description": "Set to `true` to delete `unsafe-eval` and `script-src directives` from the content security policy.",
					"type": "boolean",
					"default": false
				}
			},
			"required": ["startup_app", "finsemble"],
			"additionalProperties": false
		},
		"BootManifestSubschema": {
			"description": "The boot subschema, including manifest and partial finsemble",
			"type": "object",
			"properties": {
				"$schema": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"devtools_port": {
					"description": "Manifest property to set Chromium devTools port. ",
					"type": "number"
				},
				"startup_app": {
					"$ref": "#/definitions/manifestStartupApp"
				},
				"splashScreenImage": {
					"description": "Manifest URL for splash screen to display on startup.",
					"type": "string",
					"format": "uri"
				},
				"appAssets": {
					"title": "appAssets",
					"description": "Manifest array of external assets to be automatically loading by FEA. ",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"src": {
								"type": "string"
							},
							"version": {
								"type": "string"
							},
							"alias": {
								"type": "string"
							},
							"target": {
								"type": "string"
							}
						},
						"requiredPlaceHolder": ["src", "version", "alias", "target"]
					}
				},
				"finsemble": {
					"title": "finsemble",
					"description": "Subschema for config required to boot finsemble",
					"type": "object",
					"properties": {
						"applicationRoot": {
							"type": "string"
						},
						"moduleRoot": {
							"type": "string"
						},
						"servicesRoot": {
							"type": "string"
						},
						"thirdPartyRoot": {
							"type": "string"
						},
						"configVersion": {
							"type": "string"
						},
						"configSchemaURL": {
							"type": "string"
						},
						"notificationURL": {
							"type": "string"
						},
						"bootConfig": {
							"$ref": "#/definitions/boot_config"
						},
						"router": {
							"$ref": "#/definitions/router"
						},
						"bootTasks": {
							"$ref": "#/definitions/bootTasks"
						},
						"system": {
							"$ref": "#/definitions/system"
						}
					},
					"required": [
						"applicationRoot",
						"moduleRoot",
						"servicesRoot",
						"thirdPartyRoot",
						"configVersion",
						"configSchemaURL",
						"notificationURL",
						"bootConfig",
						"bootTasks",
						"system"
					]
				},
				"finsemble-electron-adapter": {
					"$ref": "#/definitions/electronAdapter"
				},
				"custom": {}
			},
			"required": ["startup_app", "finsemble"],
			"additionalProperties": false
		},
		"FinsembleSubschema": {
			"title": "finsemble",
			"description": "Subschema for all finsemble config (without the manifest)",
			"type": "object",
			"properties": {
				"$schema": {
					"type": "string"
				},
				"applicationRoot": {
					"description": "(PUBLIC) Should point to the root of your application. Finsemble will use this to build URLs internally.",
					"type": "string",
					"default": "https://localhost:3375"
				},
				"authentication": {
					"$ref": "#/definitions/authenticationProfile"
				},
				"moduleRoot": {
					"description": "(PUBLIC) Where you are serving the Finsemble core library from. This is important for resolving URLs internally.",
					"type": "string",
					"default": "https://localhost:3375/finsemble"
				},
				"servicesRoot": {
					"description": "(PRIVATE) Default location of core services. ",
					"type": "string"
				},
				"notificationURL": {
					"type": "string"
				},
				"bootConfig": {
					"$ref": "#/definitions/boot_config"
				},
				"router": {
					"$ref": "#/definitions/router"
				},
				"bootTasks": {
					"$ref": "#/definitions/bootTasks"
				},
				"system": {
					"$ref": "#/definitions/system"
				},
				"thirdPartyRoot": {
					"description": "(PRIVATE) (DEPRECATED) Required location of third-party services. ",
					"type": "string"
				},
				"workspaceTemplates": {
					"$ref": "#/definitions/blankWorkspaceTemplate"
				},
				"configVersion": {
					"description": "(PUBLIC) Version of this schema. ",
					"type": "string"
				},
				"configSchemaURL": {
					"description": "(PUBLIC) URL of this schema.  Used for run-time verification of configuration. ",
					"type": "string"
				},
				"importConfig": {
					"$ref": "#/definitions/importConfig"
				},
				"importThirdPartyConfig": {
					"$ref": "#/definitions/importThirdPartyConfig"
				},
				"securityPolicies": {
					"$ref": "#/definitions/securityPolicies"
				},
				"securityPolicyRules": {
					"$ref": "#/definitions/securityPolicyRules",
					"requiredPlaceHolder": ["crossDomain", "sameDomain"]
				},
				"accessibleLinker": {
					"description": "(PUBLIC)",
					"type": "boolean"
				},
				"servicesConfig": {
					"$ref": "#/definitions/servicesConfig"
				},
				"preferences": {
					"$ref": "#/definitions/preferences"
				},
				"systemTrayIcon": {
					"description": "(PUBLIC) Sets the location of the system tray icon (lower right corner of the terminal)",
					"type": "string"
				},
				"systemTrayComponent": {
					"description": "(PUBLIC)",
					"type": "string"
				},
				"Window Manager": {
					"$ref": "#/definitions/windowManager"
				},
				"betaFeatures": {
					"description": "(PRIVATE) (DEPRECATED)",
					"type": "object"
				},
				"//appDirectoryEndpoint": {
					"type": "string"
				},
				"appDirectoryEndpoint": {
					"type": "string"
				},
				"globalHotkeys": {
					"description": "(PUBLIC)",
					"type": "object"
				},
				"workspaces": {
					"$ref": "#/definitions/workspacesArray"
				},
				"components": {
					"$ref": "#/definitions/components"
				},
				"services": {
					"$ref": "#/definitions/services"
				},
				"feaURLWhitelist": {
					"description": "A regex pattern that represents a URL whitelist. If set, components will **only** be able to navigate to URLs that match the regex pattern.",
					"type": "string"
				},
				"cssOverridePath": {
					"description": "(DEPRECATED)",
					"type": "string"
				},
				"debugServiceDelay": {
					"description": "(DEPRECATED)",
					"type": "number"
				},
				"failedComponentCloseNotification": {
					"description": "If true throw a notification when a component fails to close within the time limit specified in `finsemble[\"Window Manager\"].componentCloseTimeout`",
					"type": "boolean",
					"default": false
				},
				"initialWorkspace": {
					"description": "The workspace name specified by this config will be the first one presented to an end user the very first time they start the smart desktop. This overrides the default behavior set by the config: finsemble.workspaces. After the very first instance of the smart desktop, Finsemble will load the last workspace loaded or any workspace specified by user preferences.",
					"type": "string"
				},
				"isAuthEnabled": {
					"description": "(DEPRECATED)",
					"type": "boolean",
					"default": false
				},
				"shutdownTimeout": {
					"description": "Amount of time (in milliseconds) to give services to shutdown before forcibly quitting the application. Components get 2 seconds less than services.",
					"type": "number",
					"minimum": 0,
					"default": 10000
				},
				"splashScreenImage": {
					"description": "URL to use for splash screen image when starting Finsemble.",
					"type": "string",
					"default": "http://localhost:3375/assets/img/FinsembleSplash.png"
				},
				"splashScreenTimeout": {
					"description": "Amount of time (in milliseconds) to show the splash screen",
					"type": "number",
					"default": 6000
				},
				"scheduledRestart": {
					"description": "Set Finsemble to automatically restart. These values can be overriden by the user through user preferences.\r\nhour 0 - The hour when Finsemble should restart. This is in 24 hour time according to the user's local machine's timezone.\r\nminute 0 - The minute when Finsemble should restart.\r\ndialogTimeout 10000 - When it is time to restart, the user is presented with a dialog to confirm or cancel. Since resets occur at night while the machine is unattended, most often the dialog will time out and Finsemble will reset. The `dialogTimeout` specifies how long to wait for a user response in milliseconds.",
					"type": "boolean",
					"default": false
				},
				"stackedWindow": {
					"$ref": "#/definitions/stackedWindow"
				},
				"comment": {
					"description": "(DEPRECATED) Comment string inserted into config.",
					"type": "string"
				},
				"//": {
					"description": "(DEPRECATED) Comment string inserted into config.",
					"type": "string"
				},
				"custom": {}
			},
			"required": [
				"applicationRoot",
				"moduleRoot",
				"servicesRoot",
				"notificationURL",
				"bootConfig",
				"bootTasks",
				"system",
				"thirdPartyRoot",
				"workspaceTemplates",
				"configSchemaURL",
				"securityPolicies",
				"securityPolicyRules",
				"accessibleLinker",
				"servicesConfig",
				"preferences",
				"systemTrayIcon",
				"systemTrayComponent",
				"Window Manager",
				"betaFeatures",
				"//appDirectoryEndpoint",
				"appDirectoryEndpoint",
				"globalHotkeys",
				"workspaces",
				"components",
				"services"
			],
			"additionalProperties": false
		},
		"manifestStartupApp": {
			"description": "Manifest property for the initial startup app, which reference Finsemble's System Manager.",
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"uuid": {
					"type": "string"
				},
				"requireHandshake": {
					"type": "boolean"
				},
				"applicationIcon": {
					"type": "string"
				},
				"defaultTop": {
					"type": "number"
				},
				"defaultLeft": {
					"type": "number"
				},
				"defaultHeight": {
					"type": "number"
				},
				"defaultWidth": {
					"type": "number"
				},
				"showTaskbarIcon": {
					"type": "boolean"
				},
				"autoShow": {
					"type": "boolean"
				},
				"frame": {
					"type": "boolean"
				},
				"resizable": {
					"type": "boolean"
				},
				"maximizable": {
					"type": "boolean"
				},
				"delay_connection": {
					"type": "boolean"
				},
				"contextMenu": {
					"type": "boolean"
				},
				"cornerRounding": {
					"$ref": "#/definitions/cornerRounding"
				},
				"alwaysOnTop": {
					"type": "boolean"
				}
			},
			"required": ["name", "url", "uuid"]
		},
		"appAssets": {
			"title": "appAssets",
			"description": "Manifest array of external assets to be automatically loading by FEA. ",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"src": {
						"type": "string",
						"format": "uri"
					},
					"version": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"target": {
						"type": "string"
					}
				},
				"requiredPlaceHolder": ["src", "version", "alias", "target"]
			}
		},
		"windowManager": {
			"title": "Window Manager",
			"description": "(PUBLIC) Global settings for the window title bar.",
			"type": "object",
			"properties": {
				"alwaysOnTopIcon": {
					"description": "When set to `true`, all windows can be pinned so that they are always on top (like a sticky note). You can override this setting for specific components in their config.",
					"type": "boolean",
					"default": false
				},
				"floatingTitlebarComponent": {
					"type": "string"
				},
				"deliveryMechanism": {
					"description": "Which delivery method to use for scripts (e.g., FSBL, title bar, etc.) - Valid values are:\r\n\"injection\" - Injects the code into the window.",
					"type": "string",
					"enum": ["injection", "preload"],
					"default": "injection"
				},
				"zoom": {
					"description": "Configuration for the zoom.js preload",
					"type": "object",
					"properties": {
						"timeout": {
							"description": "The number of milliseconds the zoom pop up should be displayed before it is hidden.",
							"type": "number",
							"default": 3000
						},
						"step": {
							"description": "How much the zoom should increase or decrease when zooming in or out.",
							"type": "number",
							"default": 0.1
						},
						"max": {
							"description": "The maximum allowed zoom level.",
							"type": "number",
							"default": 5.0
						},
						"min": {
							"description": "The minimum allowed zoom level.",
							"type": "number",
							"default": 0.2
						}
					},
					"additionalProperties": false
				},
				"componentCloseTimeout": {
					"description": "TBD"
				}
			}
		},
		"authenticationProfile": {
			"description": "This is where the authentication profiles are kept. There can be an authentication profile if authentication is enabled through the special “STARTUP” profile, but they can also be used independently by components for oauth.",
			"type": "object"
		},
		"blankWorkspaceTemplate": {
			"title": "workspaceTemplates",
			"type": "object",
			"properties": {
				"Blank Template": {
					"$ref": "#/definitions/workspaceTemplate"
				}
			}
		},
		"preferences": {
			"title": "preferences",
			"description": "(PUBLIC) User Perferences",
			"type": "object",
			"properties": {
				"promptUserOnDirtyWorkspace": {
					"description": "When set to `false`, the user's workspace automatically saves to the last configuration when switching workspaces or closing Finsemble. When set to `true`, the user is prompted to save the current workspace configuration.",
					"type": "boolean",
					"default": true
				}
			}
		},
		"servicesConfig": {
			"title": "servicesConfig",
			"description": "(PUBLIC) Configurations that override the defaults for Finsemble's built-in services.",
			"type": "object",
			"properties": {
				"distributedStore": {
					"title": "distributedStore",
					"type": "object",
					"properties": {
						"spawnsAs": {
							"$ref": "#/definitions/spawnAs"
						},
						"affinity": {
							"description": "Only applicable for `spawnAs: \"window\"`. When set, the service window will be given process affinity based on the string passed in. This allows aggregation of services to a specific browser process.",
							"type": "string"
						},
						"visible": {
							"description": "Set this to `true` in order to reveal the hidden service window. This can be useful for debugging services.",
							"type": "boolean",
							"default": false
						},
						"active": {
							"description": "Set this to `false` to disable the service.",
							"type": "boolean",
							"default": true
						},
						"initialStores": {
							"title": "initialStores",
							"description": "Foundations for any stores which should be seeded on startup",
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"preferPreviousState": {
										"type": "boolean"
									},
									"foundation": {
										"title": "foundation",
										"type": "object",
										"properties": {
											"appFolders": {
												"title": "appFolders",
												"type": "object",
												"properties": {
													"list": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"folders": {
														"title": "folders",
														"type": "object",
														"properties": {
															"Advanced App Launcher": {
																"$ref": "#/definitions/foldersAppDefinition"
															},
															"Favorites": {
																"$ref": "#/definitions/foldersAppDefinition"
															}
														}
													}
												}
											},
											"appDefinitions": {
												"type": "object"
											}
										}
									},
									"default": {
										"title": "default",
										"type": "object",
										"properties": {
											"activeLauncherTags": {
												"type": "array"
											},
											"filterText": {
												"type": "string"
											},
											"filterTags": {
												"type": "array"
											},
											"activeFolder": {
												"type": "string"
											},
											"sortBy": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					},
					"required": ["initialStores"],
					"additionalProperties": false
				},
				"docking": {
					"title": "docking",
					"description": "Configs specific to the docking service",
					"type": "object",
					"properties": {
						"spawnsAs": {
							"$ref": "#/definitions/spawnAs"
						},
						"affinity": {
							"description": "Only applicable for `spawnAs: \"window\"`. When set, the service window will be given process affinity based on the string passed in. This allows aggregation of services to a specific browser process.",
							"type": "string"
						},
						"visible": {
							"description": "Set this to `true` in order to reveal the hidden service window. This can be useful for debugging services.",
							"type": "boolean",
							"default": false
						},
						"active": {
							"description": "Set this to `false` to disable the service.",
							"type": "boolean",
							"default": true
						},
						"enabled": {
							"type": "boolean"
						},
						"groupTileBuffer": {
							"type": "number"
						},
						"headerHeight": {
							"description": "This defines the height of the window title bar.",
							"type": "number",
							"default": 32
						},
						"headerWidth": {
							"description": "This defines the width of the window title bar.",
							"type": "number",
							"default": 32
						},
						"MINIMUM_HEIGHT": {
							"description": "The smallest height to allow a window to shrink on resize.",
							"type": "number",
							"default": 28
						},
						"MINIMUM_WIDTH": {
							"description": "The smallest width to allow a window to shrink on resize.",
							"type": "number",
							"default": 98
						},
						"requireRectangularityForGroupResize": {
							"description": " If a group of windows forms a rectangle, it can be resized. By turning this to `false`, the user can resize any shaped group by grabbing a corner that is not on another window's edge.",
							"type": "boolean",
							"default": true
						},
						"undockDisbandsEntireGroup": {
							"description": "By default, when a user clicks the \"Undock\" button in the title bar, it will leave the group without destroying that group. Set this value to `true` if you would like to eliminate the group when the user clicks the \"Undock\" button.",
							"type": "boolean",
							"default": false
						},
						"fillHolesOnUndock": {
							"description": "If set to `true`, a rectangular group will maintain its rectangularity when windows leave the group.",
							"type": "boolean",
							"default": true
						},
						"tabbing": {
							"type": "object",
							"properties": {
								"enabled": {
									"description": "Allows windows to tab onto each other.",
									"type": "boolean",
									"default": false
								}
							},
							"additionalProperties": false
						},
						"tiling": {
							"type": "object",
							"properties": {
								"enabled": {
									"description": "Allows windows to tile onto each other.",
									"type": "boolean",
									"default": false
								}
							},
							"additionalProperties": false
						},
						"ALLOW_GROUPS_TO_SNAP": {
							"description": "Allows groups to snap to one another.",
							"type": "boolean",
							"default": true
						},
						"BUFFER_SIZE": {
							"description": "The zone around a window that will cause it to snap to other windows. This value is in pixels.",
							"type": "number",
							"default": 20
						},
						"enableWindowsAeroSnap ": {
							"description": "If `true`, windows aero snap keyboard shortcuts (WINDOWS KEY + UP, RIGHT, DOWN, or LEFT arrow key) will move the current window when pressed. Windows will move the window and Finsemble will respond by updating bounds within the Window Service. If `false` (default), these actions will be cancelled by Finsemble.",
							"type": "boolean",
							"default": false
						},
						"fillHolesOnUndock ": {
							"description": "If set to `true`, a rectangular group will maintain its rectangularity when windows leave the group.",
							"default": true
						},
						"GROUP_MODE": {
							"type": "object",
							"properties": {
								"enabled": {
									"description": "Whether to allow windows to group to one another.",
									"type": "boolean",
									"default": true
								},
								"behavior ": {
									"type": "string",
									"enum": ["explicit", "implicit"],
									"default": "explicit"
								}
							},
							"additionalProperties": false
						},
						"RESIZE_EVENT_THROTTLE_PERIOD": {
							"description": "Value (in milliseconds) to throttle resize events. If you find that the quantity of resize events is causing poor performance, tweak this value until you are happy with the performance.",
							"type": "number",
							"default": 0
						},
						"SNAPPING_OPACITY": {
							"description": "The opacity windows change to when other windows encroach on their buffer zone.",
							"type": "number",
							"default": 0.8
						}
					},
					"required": [
						"enabled",
						"groupTileBuffer",
						"headerHeight",
						"MINIMUM_WIDTH",
						"requireRectangularityForGroupResize",
						"undockDisbandsEntireGroup",
						"fillHolesOnUndock",
						"tiling"
					],
					"additionalProperties": false
				},
				"launcher": {
					"title": "launcher",
					"type": "object",
					"properties": {
						"spawnsAs": {
							"$ref": "#/definitions/spawnAs"
						},
						"affinity": {
							"description": "Only applicable for `spawnAs: \"window\"`. When set, the service window will be given process affinity based on the string passed in. This allows aggregation of services to a specific browser process.",
							"type": "string"
						},
						"visible": {
							"description": "Set this to `true` in order to reveal the hidden service window. This can be useful for debugging services.",
							"type": "boolean",
							"default": false
						},
						"active": {
							"description": "Set this to `false` to disable the service.",
							"type": "boolean",
							"default": true
						},
						"concurrentSpawnLimit": {
							"description": "This specifies the number of components that can be spawned concurrently during Workspace load. The default is machine's number of processor cores divided by 2. <b>More than one window per core can potentially cause performance issues on processor-intensive components. Defaults to the machine's number of processor cores divided by 2",
							"type": "number",
							"minimum": 1
						},
						"staggerPixels": {
							"type": "number"
						},
						"unknownComponent": {
							"type": "string"
						},
						"search": {
							"description": "Allows you to control the component search built into finsemble",
							"type": "object",
							"properties": {
								"enabled": {
									"description": "Set to false to disable component search.",
									"type": "boolean",
									"default": true
								},
								"options": {
									"description": "An object containing fuse.js configuration options."
								}
							},
							"additionalProperties": false
						}
					},
					"required": ["staggerPixels", "unknownComponent"]
				},
				"logger": {
					"title": "logger",
					"type": "object",
					"properties": {
						"spawnsAs": {
							"$ref": "#/definitions/spawnAs"
						},
						"affinity": {
							"description": "Only applicable for `spawnAs: \"window\"`. When set, the service window will be given process affinity based on the string passed in. This allows aggregation of services to a specific browser process.",
							"type": "string"
						},
						"visible": {
							"description": "Set this to `true` in order to reveal the hidden service window. This can be useful for debugging services.",
							"type": "boolean",
							"default": false
						},
						"active": {
							"description": "Set this to `false` to disable the service.",
							"type": "boolean",
							"default": true
						},
						"hotkeyShowCentralLogger": {
							"description": "Sets the hotkey for showing the Central Logger. Leave this config out to disable the hotkey.",
							"type": "array",
							"items": {
								"type": "string"
							},
							"default": ["ctrl", "shift", "L"]
						}
					},
					"additionalProperties": false
				},
				"storage": {
					"title": "storage",
					"type": "object",
					"properties": {
						"spawnsAs": {
							"$ref": "#/definitions/spawnAs"
						},
						"affinity": {
							"description": "Only applicable for `spawnAs: \"window\"`. When set, the service window will be given process affinity based on the string passed in. This allows aggregation of services to a specific browser process.",
							"type": "string"
						},
						"visible": {
							"description": "Set this to `true` in order to reveal the hidden service window. This can be useful for debugging services.",
							"type": "boolean",
							"default": false
						},
						"active": {
							"description": "Set this to `false` to disable the service.",
							"type": "boolean",
							"default": true
						},
						"defaultStorage": {
							"description": "The default storage model to use when saving and loading data.",
							"type": "string",
							"default": "IndexedDBAdapter"
						},
						"dataStoreAdapters": {
							"title": "dataStoreAdapters",
							"description": "Storage adapters that the storage service will load up on application startup.",
							"type": "object",
							"properties": {
								"LocalStorageAdapter": {
									"description": "local storage adapter .js file",
									"type": "string",
									"default": "$applicationRoot/adapters/localStorageAdapter.js"
								},
								"IndexedDBAdapter": {
									"description": "indexedDB adapter .js file",
									"type": "string",
									"default": "$applicationRoot/adapters/indexedDBAdapter.js"
								}
							}
						},
						"topicToDataStoreAdapters": {
							"title": "topicToDataStoreAdapters",
							"type": "object",
							"properties": {
								"finsemble": {
									"description": "Which storage adapter to use when persisting non-workspace-related information.",
									"type": "string",
									"default": "IndexedDBAdapter"
								},
								"finsemble.workspace": {
									"description": "Which storage adapter to use when persisting workspace-related information.",
									"type": "string",
									"default": "IndexedDBAdapter"
								},
								"finsemble.workspace.cache": {
									"description": "Which storage adapter to use when caching workspace-related information.",
									"type": "string",
									"default": "IndexedDBAdapter"
								}
							},
							"required": [
								"finsemble",
								"finsemble.workspace",
								"finsemble.workspace.cache"
							],
							"additionalProperties": false
						}
					},
					"required": [
						"defaultStorage",
						"dataStoreAdapters",
						"topicToDataStoreAdapters"
					]
				},
				"workspace": {
					"type": "object",
					"properties": {
						"spawnsAs": {
							"$ref": "#/definitions/spawnAs"
						},
						"affinity": {
							"description": "Only applicable for `spawnAs: \"window\"`. When set, the service window will be given process affinity based on the string passed in. This allows aggregation of services to a specific browser process.",
							"type": "string"
						},
						"visible": {
							"description": "Set this to `true` in order to reveal the hidden service window. This can be useful for debugging services.",
							"type": "boolean",
							"default": false
						},
						"active": {
							"description": "Set this to `false` to disable the service.",
							"type": "boolean",
							"default": true
						},
						"persistURL": {
							"description": "A global config for component URL persistence. When true, components automatically save their last URL instead of using the one in the config. The component config will overwrite the global config.",
							"default": false
						},
						"closeWorkspaceTimeout": {
							"description": "Number of miliseconds the workspace service should wait for all of the windows to close when switching to another workspace. Workspaces are locked until a close action completes or times out. If this timeout value is exceeded the user will be provided with a notification and an empty workspace will be loaded. Set to null for no timeout.",
							"type": "number",
							"default": 30000
						},
						"closeFailureNotificationMessage": {
							"description": "Override the default notification message that appears to the end user when closeWorkspaceTimeout is triggered. Set to \"\" to stop a message from being sent.",
							"type": "string"
						},
						"search": {
							"description": "Allows you to control the workspace search built into finsemble",
							"type": "object",
							"properties": {
								"enabled": {
									"description": "Set to false to disable workspace search.",
									"type": "boolean",
									"default": true
								},
								"options": {
									"description": "An object containing fuse.js configuration options."
								}
							},
							"additionalProperties": false
						}
					},
					"additionalProperties": false
				},
				"assimilation": {
					"$ref": "#/definitions/serviceAssimilationConfig"
				}
			},
			"additionalProperties": false
		},
		"importConfig": {
			"description": "(PUBLIC) Defines an array of JSON URLs to be imported into the top-level finsemble object. Note that this will overwrite any existing config settings, with two exceptions:\r\n\r\nNew services defined under finsemble.services will be added to the list of existing services (as opposed to replacing the existing list of services).\r\n\r\nNew components defined under finsemble.components will be added to the list of existing components (as opposed to replacing the list of existing components).",
			"type": "array",
			"items": {
				"type": "string"
			},
			"examples": [
				[
					"$applicationRoot/configs/application/UIComponents.json",
					"$applicationRoot/configs/application/components.json"
				]
			]
		},
		"importThirdPartyConfig": {
			"description": "(PUBLIC) This import is essentially the same as importConfig with one notable difference: the imported configuration settings cannot overwrite any existing settings. In this case, the settings for any potential overwrite will be discarded with a warning message written to the Config Service's log.",
			"type": "array",
			"items": [
				{
					"type": "string"
				}
			],
			"additionalItems": false
		},
		"router": {
			"title": "router",
			"description": "(PUBLIC) Configurations for Router's communication mechanism.",
			"type": "object",
			"properties": {
				"crossDomainTransport": {
					"description": "The interface for communicating between cross-domain components - When set to `IPCBus`, the default,, all cross-domain components will use IPC to communicate. When set to `FinsembleTransport`, cross-domain components will use IAC. You might switch the `crossDomainTransport` if you are having connection issues involving firewalls, your CSP, etc. Available values are 'IPCBus' and 'FinsembleTransport'.",
					"type": "string",
					"enum": ["IPCBus", "SharedWorker", "FinsembleTransport"],
					"default": "IPCBus"
				},
				"sameDomainTransport": {
					"description": "The transport for components and services with Finsemble's domain. ",
					"type": "string",
					"enum": ["IPCBus", "SharedWorker", "FinsembleTransport"],
					"default": "SharedWorker"
				},
				"transportSettings": {
					"title": "transportSettings",
					"description": "The specific setting for certain transports.",
					"type": "object",
					"properties": {
						"FinsembleTransport": {
							"title": "FinsembleTransport",
							"description": " Configuration for the FinsembleTransport (IAC) if chosen as the communication mechanism for cross-domain components. IAC uses WebSocket as its communication protocol.",
							"type": "object",
							"properties": {
								"serverAddress": {
									"description": "URI for the WebSocket server. To use a secure connection, use 'wss://localhost.chartiq.com:3376'",
									"type": "string",
									"default": "ws://127.0.0.1:3376"
								}
							},
							"required": ["serverAddress"]
						}
					},
					"required": ["FinsembleTransport"],
					"default": {}
				}
			},
			"additionalProperties": false,
			"example": {
				"router": {
					"crossDomainTransport": "IPCBus",
					"sameDomainTransport": "SharedWorker",
					"transportSettings": {
						"FinsembleTransport": {
							"serverAddress": "ws://127.0.0.1:3376"
						}
					}
				}
			}
		},
		"system": {
			"title": "system",
			"description": "Core configuration for system. Much of this is boot config.",
			"type": "object",
			"properties": {
				"FSBLVersion": {
					"type": "string"
				},
				"gitHash": {
					"type": "string"
				},
				"finsembleLibraryPath": {
					"type": "string"
				},
				"premiumRoot": {
					"type": "string"
				},
				"systemTrayIcon": {
					"type": "string"
				},
				"addFSBLWrappers": {
					"type": "boolean"
				},
				"saveLogToFileOnShutDown": {
					"type": "boolean"
				},
				"scheduledRestart": {
					"type": "boolean"
				},
				"isolateCrossDomainComponents": {
					"type": "boolean"
				},
				"requiredServicesConfig": {
					"title": "requiredServicesConfig",
					"description": "Core System Configuration that is typically never modified by users. ",
					"type": "object",
					"properties": {
						"routerService": {
							"type": "object",
							"properties": {
								"bootParams": {
									"$ref": "#/definitions/bootParamsProperties"
								},
								"spawnAs": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"html": {
									"type": "string"
								},
								"file": {
									"type": "string"
								}
							}
						},
						"loggerService": {
							"type": "object",
							"properties": {
								"bootParams": {
									"$ref": "#/definitions/bootParamsProperties"
								},
								"spawnAs": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"html": {
									"type": "string"
								},
								"file": {
									"type": "string"
								}
							}
						},
						"dataStoreService": {
							"type": "object",
							"properties": {
								"bootParams": {
									"$ref": "#/definitions/bootParamsProperties"
								},
								"spawnAs": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"html": {
									"type": "string"
								},
								"file": {
									"type": "string"
								}
							},
							"additionalProperties": false
						},
						"configService": {
							"type": "object",
							"properties": {
								"bootParams": {
									"$ref": "#/definitions/bootParamsProperties"
								},
								"spawnAs": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"html": {
									"type": "string"
								},
								"file": {
									"type": "string"
								},
								"changeApplicationStateBeforeLoad": {
									"type": "string"
								},
								"changeApplicationStateAfterLoad": {
									"type": "string"
								}
							},
							"additionalProperties": false
						}
					},
					"required": [
						"routerService",
						"loggerService",
						"dataStoreService",
						"configService"
					],
					"additionalProperties": false
				}
			},
			"required": [
				"FSBLVersion",
				"gitHash",
				"finsembleLibraryPath",
				"premiumRoot",
				"systemTrayIcon",
				"addFSBLWrappers",
				"saveLogToFileOnShutDown",
				"scheduledRestart",
				"isolateCrossDomainComponents",
				"requiredServicesConfig"
			],
			"additionalProperties": false
		},
		"bootTasks": {
			"title": "bootTasks",
			"description": "Startup configutation of internal boot tasks. ",
			"type": "object",
			"properties": {
				"initializeDeepLinkingTask": {
					"$ref": "#/definitions/bootParams"
				},
				"initializeRouterTask": {
					"$ref": "#/definitions/bootParams"
				},
				"initializeFinsemblePubsubTask": {
					"$ref": "#/definitions/bootParams"
				},
				"initializeSystemStateHandersTask": {
					"$ref": "#/definitions/bootParams"
				},
				"updateServiceLauncherConfigTask": {
					"$ref": "#/definitions/bootParams"
				},
				"testTask_initializeSplinterAgentPool": {
					"$ref": "#/definitions/bootParams"
				},
				"waitForAuthenticatedTask": {
					"$ref": "#/definitions/bootParams"
				},
				"initializeSystemManagerAPITask": {
					"$ref": "#/definitions/bootParams"
				},
				"startLoggerTask": {
					"$ref": "#/definitions/bootParams"
				},
				"loadUserDefinedComponentsTask": {
					"$ref": "#/definitions/bootParams"
				},
				"loadFDC3InstalledComponentsTask": {
					"$ref": "#/definitions/bootParams"
				},
				"loadSystemTrayIconTask": {
					"$ref": "#/definitions/bootParams"
				},
				"registerHotkeysTask": {
					"$ref": "#/definitions/bootParams"
				},
				"setupSearchLauncherTask": {
					"$ref": "#/definitions/bootParams"
				},
				"checkForScheduledRestartTask": {
					"$ref": "#/definitions/bootParams"
				}
			},
			"additionalProperties": {
				"$ref": "#/definitions/bootParams"
			}
		},
		"boot_config": {
			"title": "bootConfig",
			"description": "(PUBLIC) Boot/startup configuration parameter used by the System Manager.",
			"type": "object",
			"properties": {
				"onErrorMakeSystemManagerVisible": {
					"type": "boolean",
					"default": true
				},
				"defaults": {
					"title": "defaults",
					"type": "object",
					"properties": {
						"startServiceTimeout": {
							"type": "number",
							"minimum": 0,
							"maximum": 999999,
							"default": 10000
						},
						"startComponentTimeout": {
							"type": "number",
							"minimum": 0,
							"default": 15000
						},
						"startTaskTimeout": {
							"type": "number",
							"minimum": 0,
							"maximum": 999999,
							"default": 10000
						}
					},
					"additionalProperties": false
				}
			},
			"additionalProperties": false
		},
		"bootParams": {
			"description": "(PUBLIC) Startup boot parameters for services, components, and boot tasks",
			"type": "object",
			"properties": {
				"bootParams": {
					"$ref": "#/definitions/bootParamsProperties"
				}
			},
			"additionalProperties": false
		},
		"bootParamsProperties": {
			"title": "bootParams",
			"description": "Boot parameter properties",
			"type": "object",
			"properties": {
				"stage": {
					"type": "string",
					"enum": [
						"microkernel",
						"kernel",
						"authentication",
						"preuser",
						"earlyuser",
						"user"
					]
				},
				"stopOnFailure": {
					"type": "boolean"
				},
				"autoStart": {
					"type": "boolean"
				},
				"condition": {
					"type": "string"
				},
				"customFailureMessage": {
					"type": "string"
				},
				"timeout": {
					"type": "number"
				},
				"dependencies": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"checkpoints": {
					"title": "checkpoints",
					"type": "object"
				}
			},
			"additionalProperties": false
		},
		"components": {
			"title": "components",
			"description": "(PUBLIC) Configurations for components.",
			"type": "object",
			"properties": {
				"Toolbar": {
					"$ref": "#/definitions/component"
				},
				"windowTitleBar": {
					"$ref": "#/definitions/component"
				},
				"QuickComponentForm": {
					"$ref": "#/definitions/component"
				},
				"Docking Move Mask": {
					"$ref": "#/definitions/component"
				},
				"yesNo": {
					"$ref": "#/definitions/component"
				},
				"singleInput": {
					"$ref": "#/definitions/component"
				},
				"dialogModal": {
					"$ref": "#/definitions/component"
				},
				"UserPreferences": {
					"$ref": "#/definitions/component"
				},
				"SystemTrayComponent": {
					"$ref": "#/definitions/component"
				},
				"Floating Titlebar": {
					"$ref": "#/definitions/component"
				},
				"linkerWindow": {
					"$ref": "#/definitions/component"
				},
				"App Launcher": {
					"$ref": "#/definitions/component"
				},
				"Advanced App Launcher": {
					"$ref": "#/definitions/component"
				},
				"Process Monitor": {
					"$ref": "#/definitions/component"
				},
				"Advanced App Catalog": {
					"$ref": "#/definitions/component"
				},
				"nonConfiguredComponent": {
					"$ref": "#/definitions/component"
				},
				"defaultAuthentication": {
					"$ref": "#/definitions/component"
				}
			},
			"required": [
				"Toolbar",
				"windowTitleBar",
				"QuickComponentForm",
				"Docking Move Mask",
				"yesNo",
				"singleInput",
				"dialogModal",
				"UserPreferences",
				"SystemTrayComponent"
			],
			"additionalProperties": {
				"$ref": "#/definitions/component"
			}
		},
		"component": {
			"description": "single component config",
			"type": "object",
			"properties": {
				"bootParams": {
					"$ref": "#/definitions/bootParamsProperties"
				},
				"window": {
					"title": "window",
					"type": "object",
					"properties": {
						"//": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"url": {
							"type": "string"
						},
						"affinity": {
							"type": "string"
						},
						"width": {
							"type": "number"
						},
						"height": {
							"type": "number"
						},
						"dockedHeight": {
							"type": "number"
						},
						"top": {
							"type": ["string", "number"]
						},
						"left": {
							"type": ["string", "number"]
						},
						"right": {
							"type": "number"
						},
						"position": {
							"type": "string"
						},
						"dockable": {
							"type": ["array", "boolean"],
							"items": {
								"type": "string"
							}
						},
						"maxHeight": {
							"type": ["number", "boolean", "null"]
						},
						"minHeight": {
							"type": ["number", "boolean", "null"]
						},
						"minWidth": {
							"type": "number"
						},
						"docked": {
							"type": "string"
						},
						"canGroup": {
							"type": "boolean"
						},
						"options": {
							"title": "options",
							"type": "object",
							"properties": {
								"autoShow": {
									"type": "boolean"
								},
								"contextMenu": {
									"type": "boolean"
								},
								"showTaskbarIcon": {
									"type": "boolean"
								},
								"smallWindow": {
									"type": "boolean"
								},
								"maximizable": {
									"type": "boolean"
								},
								"cornerRounding": {
									"$ref": "#/definitions/cornerRounding"
								},
								"opacity": {
									"type": "number"
								},
								"resizable": {
									"type": "boolean"
								},
								"alwaysOnTop": {
									"type": "boolean"
								}
							}
						},
						"frame": {
							"type": "boolean"
						},
						"ephemeral": {
							"type": "boolean"
						},
						"resizable": {
							"type": "boolean"
						},
						"showTaskbarIcon": {
							"type": "boolean"
						},
						"show": {
							"type": "boolean"
						},
						"windowType": {
							"type": "string"
						},
						"path": {
							"type": "string"
						},
						"defaultHeight": {
							"type": "number"
						},
						"contextMenu": {
							"type": "boolean"
						},
						"addToWorkspace": {
							"type": "boolean"
						}
					},
					"additionalProperties": false
				},
				"component": {
					"type": "object",
					"properties": {
						"category": {
							"type": "string"
						},
						"spawnOnStartup": {
							"type": "boolean"
						},
						"spawnOnAllMonitors": {
							"type": "boolean"
						},
						"canMinimize": {
							"type": "boolean"
						},
						"canMaximize": {
							"type": "boolean"
						},
						"allowQuickComponent": {
							"type": "string"
						},
						"neededClients": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"displayName": {
							"type": "string"
						},
						"preload": {
							"type": "string"
						},
						"spawnOnHotkey": {
							"description": "Defines the hotkey",
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"custom": {}
					},
					"additionalProperties": false
				},
				"foreign": {
					"title": "foreign",
					"type": "object",
					"properties": {
						"agentLabel": {
							"type": "string"
						},
						"clients": {
							"title": "clients",
							"type": "object",
							"properties": {
								"dialogManager": {
									"title": "dialogManager",
									"type": "object",
									"properties": {
										"isDialog": {
											"type": "boolean"
										}
									},
									"additionalProperties": false
								}
							},
							"additionalProperties": false
						},
						"services": {
							"type": "object",
							"additionalProperties": {
								"title": "windowService",
								"type": "object",
								"properties": {
									"global": {
										"type": "boolean"
									},
									"allowSnapping": {
										"type": "boolean"
									},
									"allowGrouping": {
										"type": "boolean"
									},
									"allowAutoArrange": {
										"type": "boolean"
									},
									"allowTabbing": {
										"type": "boolean"
									},
									"allowTiling": {
										"type": "boolean"
									},
									"allowMinimize": {
										"type": "boolean"
									},
									"shouldRegister": {
										"type": "boolean"
									},
									"manageWindowMovement": {
										"type": "boolean"
									},
									"persistURL": {
										"type": "boolean"
									},
									"addToWorkspace": {
										"type": "boolean"
									}
								},
								"additionalProperties": false
							}
						},
						"components": {
							"type": "object"
						},
						"custom": {}
					}
				},
				"childWindowOptions": {
					"$ref": "#/definitions/component"
				},
				"custom": {}
			},
			"additionalProperties": false
		},
		"services": {
			"description": "(PUBLIC) Configurations for services",
			"type": "object",
			"properties": {
				"workspaceService": {
					"$ref": "#/definitions/service"
				},
				"storageService": {
					"$ref": "#/definitions/service"
				},
				"linkerService": {
					"$ref": "#/definitions/service"
				},
				"searchService": {
					"$ref": "#/definitions/service"
				},
				"windowService": {
					"$ref": "#/definitions/service"
				},
				"authenticationService": {
					"$ref": "#/definitions/service"
				},
				"assimilationService": {
					"$ref": "#/definitions/service"
				},
				"hotkeysService": {
					"$ref": "#/definitions/service"
				}
			},
			"required": [
				"workspaceService",
				"storageService",
				"linkerService",
				"searchService",
				"windowService",
				"authenticationService",
				"assimilationService",
				"hotkeysService"
			],
			"additionalProperties": {
				"$ref": "#/definitions/service"
			}
		},
		"service": {
			"description": "Configuration for one service",
			"type": "object",
			"properties": {
				"bootParams": {
					"$ref": "#/definitions/bootParamsProperties"
				},
				"name": {
					"type": "string"
				},
				"spawnAs": {
					"type": "string"
				},
				"html": {
					"type": "string"
				},
				"file": {
					"type": "string"
				},
				"category": {
					"type": "string",
					"enum": ["system"]
				},
				"window": {
					"title": "window",
					"description": "Logger service's window config",
					"type": "object",
					"properties": {
						"defaultWidth": {
							"type": "number"
						},
						"defaultHeight": {
							"type": "number"
						},
						"accelerator": {
							"title": "accelerator",
							"type": "object",
							"properties": {
								"zoom": {
									"type": "boolean"
								},
								"reload": {
									"type": "boolean"
								},
								"devtools": {
									"type": "boolean"
								}
							}
						},
						"contextMenu": {
							"type": "boolean"
						}
					}
				},
				"config": {
					"anyOf": [
						{
							"title": "windowServiceConfig",
							"description": "Service config specific to window service",
							"type": "object",
							"properties": {
								"BUFFER_SIZE": {
									"type": "number"
								},
								"RESIZE_EVENT_THROTTLE_PERIOD": {
									"type": "number"
								},
								"MINIMUM_WIDTH": {
									"type": "number"
								},
								"MINIMUM_HEIGHT": {
									"type": "number"
								},
								"GROUP_MODE": {
									"title": "GROUP_MODE",
									"type": "object",
									"properties": {
										"enabled": {
											"type": "boolean"
										},
										"behavior": {
											"type": "string"
										}
									}
								},
								"DEBUG": {
									"type": "boolean"
								},
								"ALLOW_GROUPS_TO_SNAP": {
									"type": "boolean"
								},
								"SNAPPING_OPACITY": {
									"type": "number"
								},
								"groupTileBuffer": {
									"type": "number"
								},
								"headerHeight": {
									"type": "number"
								},
								"heartbeatResponseTimeoutDefaults": {
									"title": "heartbeatResponseTimeoutDefaults",
									"type": "object",
									"properties": {
										"min": {
											"type": "number"
										},
										"max": {
											"type": "number"
										},
										"crashed": {
											"type": "number"
										},
										"possiblyCrashed": {
											"type": "number"
										},
										"notResponding": {
											"type": "number"
										}
									}
								},
								"enableWindowsAeroSnap": {
									"type": "boolean"
								},
								"tabbing": {
									"type": "object",
									"properties": {
										"enabled": {
											"type": "boolean",
											"default": true
										}
									}
								},
								"tiling": {
									"type": "object",
									"properties": {
										"enabled": {
											"type": "boolean",
											"default": true
										}
									}
								}
							}
						},
						{
							"$ref": "#/definitions/serviceAssimilationConfig"
						}
					]
				},
				"channels": {
					"description": "Only used in Linker Service",
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"custom": {}
			},
			"required": ["spawnAs", "html", "file"],
			"additionalProperties": false
		},
		"serviceAssimilationConfig": {
			"title": "assimilationConfig",
			"description": "Service config specific to assimilation service",
			"type": "object",
			"properties": {
				"spawnsAs": {
					"$ref": "#/definitions/spawnAs"
				},
				"affinity": {
					"description": "Only applicable for `spawnAs: \"window\"`. When set, the service window will be given process affinity based on the string passed in. This allows aggregation of services to a specific browser process.",
					"type": "string"
				},
				"visible": {
					"description": "Set this to `true` in order to reveal the hidden service window. This can be useful for debugging services.",
					"type": "boolean",
					"default": false
				},
				"active": {
					"description": "Set this to `false` to disable the service.",
					"type": "boolean",
					"default": true
				},
				"enabled": {
					"description": "Set to true to turn on Assimilation",
					"type": "boolean",
					"default": true
				},
				"port": {
					"description": "Assimilation communicates with Finsemble's HTML services via a WebSocket. Set the port here.",
					"type": "number",
					"default": 8392
				},
				"useFeaSpawn": {
					"type": "boolean"
				},
				"throttle": {
					"description": "Windows sends dozens of events per second when a window is moved. This value tells the application how often to collect those events. You may see performance degradations if you set the throttle below 5.",
					"type": "number",
					"default": 15
				},
				"blacklist": {
					"type": "array"
				},
				"whitelist": {
					"type": "array"
				},
				"onlySpawned": {
					"description": "This Boolean tells assimilation whether it should restrict its scope to external applications spawned by Finsemble. If true, only applications launched from Finsemble will be controlled. If false, it will try to control the movements of all windows on the desktop.",
					"type": "boolean",
					"default": true
				},
				"focusDelay": {
					"description": "Sets the delay (in miliseconds) between the focus event being received and the actual focusing of the window. This is necessary because the focus event is called simultaneously with minimize/restore events, which causes issues with docking groups.",
					"type": "number",
					"default": 30
				},
				"eventIgnore": {
					"description": "Sets the threshold (in miliseconds) from the previous event before which focus/restore events are dropped. Certain sequences of minimize/restore/focus events can create an unwanted loop of events; therefore, restore and focus events are throttled with this property.",
					"type": "number",
					"default": 50
				},
				"hotkeyTimeout": {
					"type": "number"
				},
				"hideTitleBars": {
					"description": " Set to true to hide all Finsemble title bars for native applications.",
					"type": "boolean"
				}
			}
		},
		"workspacesArray": {
			"title": "workspaces",
			"description": "(PUBLIC)  An array of workspaces to be presented to the user the first time they start Finsemble. By default, the first workspace listed in the array will be the one first presented to an end user the first time they load their smart desktop.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/workspaceTemplate"
			}
		},
		"workspaceTemplate": {
			"title": "Workspace Template",
			"description": "Template for config specified workspace",
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"groups": {
					"type": "object"
				},
				"windowData": {
					"type": "array"
				},
				"windows": {
					"title": "windows",
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"componentType": {
								"type": "string"
							},
							"defaultLeft": {
								"type": "number"
							},
							"defaultTop": {
								"type": "number"
							}
						}
					}
				},
				"custom": {}
			},
			"required": ["name"],
			"additionalProperties": false
		},
		"cornerRounding": {
			"description": "Specifies corner rounding for a window",
			"properties": {
				"width": {
					"type": "number",
					"default": 0
				},
				"height": {
					"type": "number",
					"default": 0
				}
			}
		},
		"foldersAppDefinition": {
			"description": "Definition for AdvanceAppLauncher application folder",
			"type": "object",
			"properties": {
				"icon": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"canDelete": {
					"type": "boolean"
				},
				"apps": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"appID": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"stackedWindow": {
			"description": "Configuration for tabbed and tiled windows",
			"type": "object",
			"properties": {
				"addReadyTimeout": {
					"description": "Sets the time in miliseconds for a tabbed/tiled windows to become ready.",
					"type": "number",
					"default": 6500
				}
			},
			"additionalProperties": false
		},
		"spawnAs": {
			"description": "\"window\" - Spawns the service as a child window of the Service Manager. \"process\" - Spawns the service in its own browser process (a.k.a. application). This gives the service dedicated CPU to maximize concurrency. \"script\" - Spawns the service as a script running in the Service Manager window. This minimizes memory footprint. This setting can only be used with the following services: assimilation, storage, hotkeys, linker, search and workspace.",
			"type": "string",
			"enum": ["window", "process", "script"],
			"default": "window"
		},
		"securityPolicies": {
			"title": "securityPolicies",
			"description": "(PUBLIC) FEA security policy",
			"type": "object",
			"properties": {
				"//trusted": {
					"type": "string"
				},
				"trusted": {
					"type": "object"
				},
				"untrusted": {
					"title": "untrusted",
					"type": "object",
					"properties": {
						"System": {
							"title": "System",
							"type": "object",
							"properties": {
								"clearCache": {
									"type": "boolean"
								},
								"exit": {
									"type": "boolean"
								},
								"launchExternalProcess": {
									"type": "boolean"
								}
							}
						},
						"Window": {
							"title": "Window",
							"type": "object",
							"properties": {
								"executeJavaScript": {
									"type": "boolean"
								},
								"webPreferences": {}
							}
						}
					}
				}
			}
		},
		"securityPolicyRules": {
			"title": "securityPolicyRules",
			"description": "(PUBLIC)",
			"type": "object",
			"properties": {
				"crossDomain": {
					"type": "string"
				},
				"sameDomain": {
					"type": "string"
				}
			},
			"requiredPlaceHolder": ["crossDomain", "sameDomain"]
		},
		"electronAdapter": {
			"description": "Electron Adapter's config (that is dynamically added to manifest)",
			"type": "object"
		}
	}
}
